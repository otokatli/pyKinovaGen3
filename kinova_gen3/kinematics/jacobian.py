"""Jacobian matrix for Kinova Gen3

Functions
---------
jacobian(q)
jacobian_time_derivative(q, qp)

"""

import math
import numpy


def jacobian(q):
    """The Jacobian of the Kinova Gen3 robot

    Arguments
    ---------
    q (array_like): The joint angles of the robot

    Returns
    -------
    ndarray: The geometric Jacobian matrix expressed in the base frame

    """

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]
    # q7 = q[6]

    x0 = math.cos(q1)
    x1 = math.sin(q1)
    x2 = math.sin(q2)
    x3 = 0.42076 * x2
    x4 = math.cos(q3)
    x5 = x0 * x4
    x6 = 0.01275 * x5
    x7 = math.cos(q4)
    x8 = x1 * x2
    x9 = x7 * x8
    x10 = math.cos(q2)
    x11 = math.sin(q3)
    x12 = x1 * x11
    x13 = x10 * x12
    x14 = math.cos(q5)
    x15 = 0.0003501 * x5
    x16 = 0.0003501 * x13 - x15
    x17 = math.sin(q4)
    x18 = x0 * x11
    x19 = 0.31436 * x18
    x20 = x1 * x4
    x21 = x10 * x20
    x22 = -x19 - 0.31436 * x21
    x23 = math.cos(q6)
    x24 = -0.16743 * x9
    x25 = x18 + x21
    x26 = x17 * x25
    x27 = math.sin(q5)
    x28 = x17 * x2
    x29 = x1 * x28
    x30 = -x18 - x21
    x31 = x30 * x7
    x32 = -0.0003501 * x29 - 0.0003501 * x31
    x33 = math.sin(q6)
    x34 = x13 - x5
    x35 = 0.16743 * x27
    x36 = x29 + x31
    x37 = 0.16743 * x14
    x38 = x36 * x37
    x39 = 0.42076 * x10
    x40 = 0.01275 * x18
    x41 = x10 * x7
    x42 = 0.31436 * x41
    x43 = 0.0003501 * x18
    x44 = x14 * x2
    x45 = 0.31436 * x5
    x46 = 0.16743 * x41
    x47 = 0.16743 * x28
    x48 = x10 * x17
    x49 = x0 * x48
    x50 = x2 * x7
    x51 = x2 * x35
    x52 = 0.01275 * x12
    x53 = 0.0003501 * x12
    x54 = 0.31436 * x20
    x55 = x10 * x18
    x56 = x20 + x55
    x57 = 0.16743 * x23
    x58 = x17 * x57
    x59 = -x20 - x55
    x60 = 0.0003501 * x7
    x61 = x27 * x60
    x62 = x10 * x5
    x63 = x12 - x62
    x64 = x37 * x59
    x65 = x0 * x28
    x66 = 0.31436 * x12
    x67 = 0.31436 * x62
    x68 = x0 * x2
    x69 = x68 * x7
    x70 = -x12 + x62
    x71 = x17 * x70
    x72 = x63 * x7
    x73 = -x69 - x71
    x74 = x33 * x37
    x75 = 0.0003501 * x20
    x76 = 0.0003501 * x55
    x77 = 0.0003501 * x65
    x78 = x7 * x70
    x79 = -x65 + x78
    x80 = x27 * x79
    x81 = 0.16743 * x69
    x82 = 0.16743 * x71
    x83 = x27 * x56
    x84 = 0.16743 * x83
    x85 = x14 * x79
    x86 = x1 * x48
    x87 = -x13 + x5
    x88 = x34 * x37
    x89 = x25 * x7
    x90 = x17 * x30
    x91 = x27 * x87
    x92 = 0.31436 * x50
    x93 = x10 * x11
    x94 = 0.0003501 * x14
    x95 = 0.31436 * x48
    x96 = 0.0003501 * x28
    x97 = x4 * x41
    x98 = 0.16743 * x50
    x99 = 0.16743 * x48
    x100 = x2 * x4
    x101 = x11 * x28
    x102 = x11 * x2
    x103 = x102 * x27
    x104 = x102 * x37
    x105 = x28 * x4
    x106 = x105 - x41
    x107 = x4 * x50
    x108 = -x107 - x48
    x109 = x26 + x9
    x110 = x29 - x89
    x111 = x107 + x48

    geometric_jacobian = numpy.array(
        [
            [
                -0.01175 * x0
                - x1 * x3
                + 0.01275 * x13
                + x14 * x16
                + x17 * x22
                + x23 * (x24 - 0.16743 * x26)
                + x27 * x32
                + x33 * (x34 * x35 + x38)
                - x6
                - 0.31436 * x9,
                x0 * x39
                + x0 * x42
                + x2 * x40
                + x23 * (x0 * x46 - x47 * x5)
                + x27 * (x15 * x50 + 0.0003501 * x49)
                - x28 * x45
                + x33 * (x18 * x51 + x37 * (-x49 - x5 * x50))
                + x43 * x44,
                -x10 * x6
                + x14 * (-x10 * x15 + x53)
                + x17 * (-x10 * x19 - x54)
                + x33 * (x35 * x63 + x64 * x7)
                + x52
                - x56 * x58
                - x59 * x61,
                x23 * (-0.16743 * x65 - 0.16743 * x72)
                + x27 * (0.0003501 * x69 + 0.0003501 * x71)
                - 0.31436 * x65
                + x7 * (-x66 + x67)
                + x73 * x74,
                x14 * (x77 - 0.0003501 * x78)
                - x27 * (-x75 - x76)
                + x33 * (x64 - 0.16743 * x80),
                x23 * (-x84 + 0.16743 * x85) - x33 * (x81 + x82),
                0,
            ],
            [
                -x0 * x3
                + 0.01175 * x1
                + x14 * (x75 + x76)
                + x17 * (x66 - x67)
                + 0.01275 * x20
                + x23 * (-x81 - x82)
                + x27 * (-0.0003501 * x72 - x77)
                + x33 * (x37 * (x65 + x72) + x84)
                + 0.01275 * x55
                - 0.31436 * x69,
                -x1 * x39
                - x1 * x42
                - x2 * x52
                + x23 * (-x1 * x46 + x20 * x47)
                + x27 * (-x50 * x75 - 0.0003501 * x86)
                + x28 * x54
                + x33 * (-x12 * x51 + x37 * (x20 * x50 + x86))
                - x44 * x53,
                x14 * (0.0003501 * x21 + x43)
                + x17 * (0.31436 * x13 - x45)
                + 0.01275 * x21
                + x33 * (x25 * x35 + x7 * x88)
                - x34 * x61
                + x40
                - x58 * x87,
                x22 * x7
                + x23 * (0.16743 * x29 - 0.16743 * x89)
                + x27 * (-0.0003501 * x9 + 0.0003501 * x90)
                + 0.31436 * x29
                + x74 * (x9 - x90),
                x14 * x32 - x16 * x27 + x33 * (-x35 * x36 + x88),
                x23 * (x38 - 0.16743 * x91) - x33 * (x24 + 0.16743 * x90),
                0,
            ],
            [
                0,
                x23 * (-x4 * x99 - x98)
                + x27 * (-x96 + 0.0003501 * x97)
                - x3
                + x33 * (x35 * x93 + x37 * (x28 - x97))
                - x4 * x95
                - x92
                + x93 * x94
                + 0.01275 * x93,
                x100 * x94
                + 0.01275 * x100
                + x101 * x57
                + 0.31436 * x101
                - x103 * x60
                + x33 * (x100 * x35 + x104 * x7),
                x106 * x74
                + x23 * (-x4 * x98 - x99)
                + x27 * (-x4 * x96 + 0.0003501 * x41)
                - x4 * x92
                - x95,
                -0.0003501 * x103
                + x14 * (0.0003501 * x107 + 0.0003501 * x48)
                + x33 * (x104 - x108 * x35),
                x23 * (x102 * x35 + x108 * x37) - x33 * (-0.16743 * x105 + x46),
                0,
            ],
            [0, x1, -x68, x56, x73, x14 * x56 + x80, x23 * x73 - x33 * (-x83 + x85)],
            [
                0,
                x0,
                x8,
                x87,
                x109,
                x110 * x27 + x14 * x87,
                x109 * x23 - x33 * (x110 * x14 - x91),
            ],
            [
                -1,
                0,
                -x10,
                -x102,
                x106,
                -x102 * x14 - x111 * x27,
                x106 * x23 - x33 * (x103 - x111 * x14),
            ],
        ]
    )

    return geometric_jacobian


def jacobian_time_derivative(q, qp):
    """The time derivative of the Jacobian of the Kinova Gen3 robot

    Arguments
    ---------
    q (array_like): The joint angles of the robot
    qp (array_like): The joint velocities of the robot

    Returns
    -------
    ndarray: The time derivative of the geometric Jacobian matrix expressed in
             the base frame

    """
    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]
    q7 = q[6]

    qp1 = qp[0]
    qp2 = qp[1]
    qp3 = qp[2]
    qp4 = qp[3]
    qp5 = qp[4]
    qp6 = qp[5]
    qp7 = qp[6]

    x0 = numpy.sin(q1)
    x1 = qp1 * x0
    x2 = numpy.cos(q3)
    x3 = x0 * x2
    x4 = qp1 * x3
    x5 = numpy.sin(q2)
    x6 = numpy.cos(q1)
    x7 = qp1 * x6
    x8 = x5 * x7
    x9 = numpy.cos(q2)
    x10 = qp2 * x9
    x11 = 0.42076 * x10
    x12 = numpy.sin(q3)
    x13 = x12 * x6
    x14 = qp3 * x13
    x15 = 0.01275 * x14
    x16 = numpy.cos(q4)
    x17 = x16 * x5
    x18 = x17 * x7
    x19 = qp1 * x13
    x20 = x19 * x9
    x21 = x0 * x12
    x22 = qp2 * x5
    x23 = x16 * x9
    x24 = x0 * x23
    x25 = qp2 * x24
    x26 = x3 * x9
    x27 = qp3 * x26
    x28 = numpy.sin(q4)
    x29 = x28 * x5
    x30 = x0 * x29
    x31 = qp4 * x30
    x32 = numpy.sin(q5)
    x33 = x21 * x9
    x34 = -x2 * x6 + x33
    x35 = -x34
    x36 = x32 * x35
    x37 = qp5 * x36
    x38 = x13 + x26
    x39 = -x38
    x40 = x16 * x39
    x41 = qp4 * x40
    x42 = numpy.cos(q5)
    x43 = x30 + x40
    x44 = x42 * x43
    x45 = qp5 * x44
    x46 = x28 * x39
    x47 = x0 * x16 * x5 - x46
    x48 = numpy.sin(q6)
    x49 = 0.16743 * x48
    x50 = qp6 * x49
    x51 = qp1 * x21
    x52 = x2 * x6
    x53 = qp3 * x52
    x54 = x22 * x3
    x55 = qp3 * x33
    x56 = qp1 * x52
    x57 = x56 * x9
    x58 = x51 - x53 + x54 + x55 - x57
    x59 = x28 * x58
    x60 = -qp2 * x0 * x12 * x5 + x14 + x20 + x27 + x4
    x61 = -x60
    x62 = x42 * x61
    x63 = -x36
    x64 = x44 + x63
    x65 = numpy.cos(q6)
    x66 = 0.16743 * x65
    x67 = qp6 * x66
    x68 = x16 * x58
    x69 = qp4 * x46
    x70 = x29 * x7
    x71 = x28 * x9
    x72 = x0 * x71
    x73 = qp2 * x72
    x74 = x0 * x17
    x75 = qp4 * x74
    x76 = x70 + x73 + x75
    x77 = x68 - x69 + x76
    x78 = x32 * x77
    x79 = qp1 * x16 * x5 * x6 + qp2 * x0 * x16 * x9 - x31 - x41 - x59
    x80 = x32 * x43
    x81 = qp5 * x80
    x82 = x32 * x61
    x83 = x35 * x42
    x84 = qp5 * x83
    x85 = x82 + x84
    x86 = x42 * x77 - x81 - x85
    x87 = 0.42076 * x9
    x88 = 0.01275 * x51
    x89 = x1 * x23
    x90 = x17 * x6
    x91 = qp2 * x90
    x92 = x6 * x71
    x93 = qp4 * x92
    x94 = 0.0003501 * x42
    x95 = x5 * x94
    x96 = qp2 * x71
    x97 = x52 * x96
    x98 = qp4 * x17
    x99 = x52 * x98
    x100 = qp5 * x32
    x101 = 0.0003501 * x100
    x102 = x23 * x6
    x103 = -x17 * x52 - x92
    x104 = x103 * x42
    x105 = 0.0003501 * qp5
    x106 = x32 * x5
    x107 = x29 * x6
    x108 = qp4 * x29
    x109 = qp2 * x23
    x110 = (
        qp2 * x107
        - qp4 * x102
        + x1 * x71
        + x108 * x52
        - x109 * x52
        + x14 * x17
        + x17 * x4
    )
    x111 = 0.0003501 * x32
    x112 = x13 * x9
    x113 = qp5 * x42
    x114 = x113 * x5
    x115 = 0.01275 * x19
    x116 = qp3 * x3
    x117 = 0.01275 * x116
    x118 = qp1 * x26
    x119 = x22 * x52
    x120 = -x2 * x6 * x9 + x21
    x121 = -x120
    x122 = x121 * x32
    x123 = x112 + x3
    x124 = -x123
    x125 = qp4 * x124
    x126 = 0.31436 * x16
    x127 = x124 * x32
    x128 = x16 * x66
    x129 = x16 * x42
    x130 = x28 * x50
    x131 = qp3 * x21
    x132 = x51 * x9
    x133 = x13 * x22
    x134 = x53 * x9
    x135 = x131 + x132 + x133 - x134 - x56
    x136 = 0.31436 * x28
    x137 = x28 * x66
    x138 = x135 * x32
    x139 = x116 + x118 + x119 + x14 * x9 + x19
    x140 = -x139
    x141 = x28 * x42
    x142 = qp2 * x92
    x143 = qp4 * x90
    x144 = x121 * x28
    x145 = qp4 * x144
    x146 = x121 * x16
    x147 = x146 - x28 * x5 * x6
    x148 = -x144 - x90
    x149 = 0.0003501 * x113
    x150 = x100 * x49
    x151 = -x1 * x29 + x142 + x143
    x152 = -x140 * x16 + x145 + x151
    x153 = qp2 * x102
    x154 = x1 * x17
    x155 = qp4 * x107
    x156 = -qp4 * x146 - x140 * x28 - x153 + x154 + x155
    x157 = x123 * x42
    x158 = qp5 * x157
    x159 = x147 * x32
    x160 = qp5 * x159
    x161 = -x135
    x162 = x161 * x32
    x163 = -x152
    x164 = x147 * x42
    x165 = -qp5 * x123 * x32 + qp5 * x164 + x161 * x42 + x163 * x32
    x166 = -x123 * x32 + x164
    x167 = -x158 - x160 - x162 + x163 * x42
    x168 = x1 * x5
    x169 = x120 * x16
    x170 = qp4 * x169
    x171 = x107 + x169
    x172 = x171 * x42
    x173 = x120 * x28
    x174 = x139 * x28
    x175 = -qp4 * x173 + x139 * x16 + x151
    x176 = qp2 * x33
    x177 = x17 * x3 + x72
    x178 = x177 * x42
    x179 = (
        -qp2 * x30
        + qp4 * x24
        - x108 * x3
        + x109 * x3
        - x131 * x17
        + x17 * x56
        + x7 * x71
    )
    x180 = qp4 * x34
    x181 = x32 * x39
    x182 = x129 * x34
    x183 = x47 * x67
    x184 = x49 * x79
    x185 = -x37 + x62
    x186 = x12 * x22
    x187 = x2 * x23
    x188 = x100 * x12
    x189 = x2 * x71
    x190 = -x187 + x29
    x191 = x190 * x42
    x192 = x12 * x32
    x193 = qp2 * x17
    x194 = qp3 * x12
    x195 = qp4 * x189 + x193 * x2 + x194 * x23 + x96 + x98
    x196 = qp2 * x29
    x197 = x2 * x32
    x198 = x113 * x12
    x199 = x194 * x5
    x200 = 0.31436 * x12
    x201 = x2 * x29
    x202 = qp3 * x201
    x203 = x2 * x5
    x204 = x12 * x66
    x205 = x111 * x12
    x206 = x17 * x2
    x207 = qp3 * x206
    x208 = x12 * x149
    x209 = x203 * x32
    x210 = x12 * x42
    x211 = x192 * x5
    x212 = x17 * x194
    x213 = x206 + x71
    x214 = x201 - x23
    x215 = x214 * x67
    x216 = qp4 * x71 + x193 - x194 * x29 + x2 * x96 + x2 * x98
    x217 = -qp2 * x16 * x2 * x9 - qp4 * x16 * x9 + x108 * x2 + x196 + x212
    x218 = -x217
    x219 = x216 * x49
    x220 = x10 * x12
    x221 = qp3 * x203
    x222 = -x213
    x223 = x222 * x32
    x224 = x217 * x42
    x225 = x188 * x5
    x226 = x10 * x210
    x227 = x221 * x42
    x228 = x222 * x42
    x229 = qp3 * x209 + x10 * x192 + x198 * x5
    x230 = qp6 * x48
    x231 = qp6 * x65
    x232 = x16 * x38
    x233 = -x58
    x234 = qp4 * x232 + x18 + x233 * x28 + x25 - x31
    x235 = x28 * x38
    x236 = qp4 * x235 - x16 * x233 + x76
    x237 = -x232 + x30
    x238 = x237 * x42
    x239 = x213 * x42

    geometric_jacobian_derivative = numpy.array(
        [
            [
                -x0 * x11
                + 0.01175 * x1
                + x15
                - 0.31436 * x18
                + 0.01275 * x20
                - 0.01275 * x21 * x22
                - 0.31436 * x25
                + 0.01275 * x27
                + 0.31436 * x31
                + 0.0003501 * x37
                + 0.01275 * x4
                + 0.31436 * x41
                - 0.0003501 * x45
                + x47 * x50
                + x49 * x86
                + 0.31436 * x59
                - 0.0003501 * x62
                + x64 * x67
                - x66 * x79
                - 0.0003501 * x78
                - 0.42076 * x8,
                0.31436 * qp1 * x0 * x2 * x28 * x5
                + 0.0003501 * qp2 * x12 * x42 * x6 * x9
                + 0.01275 * qp2 * x12 * x6 * x9
                + 0.31436 * qp3 * x12 * x28 * x5 * x6
                + 0.0003501 * qp3 * x2 * x42 * x5 * x6
                + 0.01275 * qp3 * x2 * x5 * x6
                + 0.16743 * qp6 * x48 * (-x102 + x29 * x52)
                + 0.16743 * qp6 * x65 * (x104 + x106 * x13)
                - x1 * x87
                - x101 * x13 * x5
                - x104 * x105
                - x110 * x111
                - 0.42076 * x22 * x6
                + 0.16743
                * x48
                * (
                    qp2 * x112 * x32
                    - x100 * x103
                    - x106 * x51
                    + x106 * x53
                    + x110 * x42
                    + x114 * x13
                )
                - x5 * x88
                - x51 * x95
                - x66 * (-x14 * x29 - x29 * x4 + x89 + x91 + x93 + x97 + x99)
                - 0.31436 * x89
                - 0.31436 * x91
                - 0.31436 * x93
                - 0.31436 * x97
                - 0.31436 * x99,
                0.0003501 * qp4 * x127 * x28
                + x105 * x122
                - x105 * x124 * x129
                + x115
                + x117
                + 0.01275 * x118
                + 0.01275 * x119
                - x124 * x130
                + x125 * x126
                + x125 * x128
                + x135 * x136
                + x135 * x137
                - 0.0003501 * x138 * x16
                - x140 * x94
                + x15 * x9
                + x49
                * (
                    -qp5 * x127 * x16
                    - x113 * x121
                    - x125 * x141
                    + x135 * x16 * x42
                    - x140 * x32
                )
                + x67 * (-x122 + x124 * x16 * x42),
                0.31436 * qp1 * x0 * x28 * x5
                - 0.16743 * qp6 * x147 * x48
                + 0.16743 * qp6 * x148 * x42 * x65
                - x111 * x156
                + 0.31436 * x140 * x16
                - 0.31436 * x142
                - 0.31436 * x143
                - 0.31436 * x145
                - x148 * x149
                - x148 * x150
                - x152 * x66
                + 0.16743 * x156 * x42 * x48,
                0.0003501 * x158
                + 0.0003501 * x160
                + 0.0003501 * x162
                - 0.0003501 * x163 * x42
                - x165 * x49
                + x67 * (-x157 - x159),
                x148 * x67 + x156 * x49 - x166 * x50 + x167 * x66,
                0,
            ],
            [
                x105 * x127
                - x105 * x172
                - x11 * x6
                - x111 * x175
                - 0.01275 * x131
                - 0.01275 * x132
                - 0.01275 * x133
                + 0.01275 * x134
                - x135 * x94
                - 0.31436 * x153
                + 0.31436 * x154
                + 0.31436 * x155
                + 0.42076 * x168
                + 0.31436 * x170
                + 0.31436 * x174
                + x49 * (-x100 * x171 - x113 * x124 - x138 + x175 * x42)
                + x50 * (-x173 + x90)
                + 0.01275 * x56
                - x66 * (x153 - x154 - x155 - x170 - x174)
                + x67 * (-x127 + x172)
                + 0.01175 * x7,
                0.31436 * qp1 * x2 * x28 * x5 * x6
                + 0.31436 * qp2 * x0 * x16 * x5
                + 0.31436 * qp2 * x0 * x2 * x28 * x9
                + 0.42076 * qp2 * x0 * x5
                + 0.31436 * qp4 * x0 * x16 * x2 * x5
                + 0.31436 * qp4 * x0 * x28 * x9
                + 0.0003501 * qp5 * x0 * x12 * x32 * x5
                + 0.16743 * qp6 * x48 * (x0 * x16 * x9 - x29 * x3)
                + 0.16743 * qp6 * x65 * (-x106 * x21 + x178)
                - x105 * x178
                - x111 * x179
                - x115 * x5
                - x116 * x95
                - x117 * x5
                - 0.31436 * x131 * x29
                - x176 * x94
                - 0.01275 * x176
                - x19 * x95
                - 0.31436 * x23 * x7
                + 0.16743
                * x48
                * (
                    -x100 * x177
                    - x106 * x116
                    - x106 * x19
                    - x114 * x21
                    - x176 * x32
                    + x179 * x42
                )
                - x66
                * (
                    qp1 * x16 * x6 * x9
                    - qp2 * x74
                    + qp3 * x0 * x12 * x28 * x5
                    - qp4 * x72
                    - x29 * x56
                    - x3 * x96
                    - x3 * x98
                )
                - x7 * x87,
                x105 * x181
                - x105 * x182
                - x111 * x16 * x60
                + x111 * x180 * x28
                + x126 * x180
                + x128 * x180
                - x130 * x34
                + x136 * x60
                + x137 * x60
                + x49
                * (
                    -x100 * x16 * x34
                    - x113 * x39
                    - x141 * x180
                    + x16 * x42 * x60
                    - x32 * x58
                )
                + 0.01275 * x53
                - 0.01275 * x54
                - 0.01275 * x55
                + 0.01275 * x57
                - x58 * x94
                + x67 * (-x181 + x182)
                - x88,
                -x111 * x79
                - x149 * x47
                - x150 * x47
                + x183 * x42
                + x184 * x42
                - x43 * x50
                + x66 * x77
                + 0.31436 * x68
                - 0.31436 * x69
                + 0.31436 * x70
                + 0.31436 * x73
                + 0.31436 * x75,
                -0.0003501 * x42 * x77
                + x49 * (-x185 - x45 - x78)
                + x67 * (-x80 - x83)
                + 0.0003501 * x81
                + 0.0003501 * x82
                + 0.0003501 * x84,
                x183 + x184 - x50 * x64 + x66 * x86,
                0,
            ],
            [
                0,
                0.31436 * qp2 * x2 * x28 * x5
                + 0.31436 * qp3 * x12 * x28 * x9
                + 0.0003501 * qp3 * x2 * x42 * x9
                + 0.01275 * qp3 * x2 * x9
                - 0.31436 * qp4 * x187
                + 0.31436 * qp4 * x28 * x5
                + 0.16743 * qp6 * x48 * (x17 + x189)
                + 0.16743 * qp6 * x65 * (x191 + x192 * x9)
                - x105 * x191
                - 0.31436 * x109
                - x11
                - x111 * x195
                - x186 * x94
                - 0.01275 * x186
                - 0.0003501 * x188 * x9
                + 0.16743
                * x48
                * (qp3 * x197 * x9 - x100 * x190 - x192 * x22 + x195 * x42 + x198 * x9)
                - x66
                * (
                    qp2 * x16 * x9 + qp4 * x16 * x2 * x9 - x108 - x194 * x71 - x196 * x2
                ),
                x10 * x2 * x94
                + 0.01275 * x10 * x2
                - x101 * x203
                + x108 * x205
                - x109 * x205
                - x111 * x207
                - x12 * x29 * x50
                - x17 * x208
                - x199 * x94
                - 0.01275 * x199
                + x200 * x96
                + x200 * x98
                + x202 * x66
                + 0.31436 * x202
                + x204 * x96
                + x204 * x98
                + x49
                * (
                    -qp3 * x211
                    + x10 * x197
                    - x108 * x210
                    + x109 * x210
                    + x113 * x203
                    - x17 * x188
                    + x207 * x42
                )
                + x67 * (x17 * x210 + x209),
                -0.31436 * qp2 * x187
                - 0.31436 * qp4 * x23
                + 0.31436 * x108 * x2
                - x111 * x216
                - x149 * x214
                - x150 * x214
                + 0.31436 * x196
                + 0.31436 * x212
                + x213 * x50
                + x215 * x42
                - x218 * x66
                + x219 * x42,
                0.0003501 * qp5 * x222 * x32
                + 0.16743 * qp6 * x65 * (x12 * x42 * x5 - x223)
                - x111 * x220
                - x111 * x221
                - x208 * x5
                - 0.0003501 * x224
                + 0.16743 * x48 * (-qp5 * x228 - x217 * x32 - x225 + x226 + x227),
                x215 + x219 - x50 * (x211 + x228) + x66 * (-qp5 * x223 + x224 + x229),
                0,
            ],
            [
                0,
                x7,
                -x10 * x6 + x168,
                x161,
                x156,
                x165,
                -x148 * x230 + x156 * x65 - x166 * x231 - x167 * x48,
            ],
            [
                0,
                -x1,
                x0 * x10 + x8,
                x61,
                x234,
                qp5 * x238 + x185 + x236 * x32,
                -x230 * (x235 + x74)
                - x231 * (x238 + x63)
                + x234 * x65
                - x48 * (-x100 * x237 + x236 * x42 - x85),
            ],
            [
                0,
                0,
                x22,
                -x220 - x221,
                x216,
                -qp5 * x239 - x218 * x32 + x225 - x226 - x227,
                -x214 * x230
                + x216 * x65
                - x231 * (x12 * x32 * x5 - x239)
                - x48 * (x100 * x213 - x218 * x42 + x229),
            ],
        ]
    )

    return geometric_jacobian_derivative
