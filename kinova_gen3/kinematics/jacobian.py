"""Jacobian matrix for Kinova Gen3

Functions
---------
jacobian(joint_position)

"""

import math
import numpy


def jacobian(q):
    """The Jacobian of the Kinova Gen3 robot

    Arguments
    ---------
    joint_position (array_like): The joint angles of the robot

    Returns
    -------
    ndarray: The kinematic Jacobian matrix expressed in the base frame

    """

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]
    # q7 = q[6]

    x0 = math.cos(q1)
    x1 = math.sin(q1)
    x2 = math.sin(q2)
    x3 = 0.42076 * x2
    x4 = math.cos(q3)
    x5 = x0 * x4
    x6 = 0.01275 * x5
    x7 = math.cos(q4)
    x8 = x1 * x2
    x9 = x7 * x8
    x10 = math.cos(q2)
    x11 = math.sin(q3)
    x12 = x1 * x11
    x13 = x10 * x12
    x14 = math.cos(q5)
    x15 = 0.0003501 * x5
    x16 = 0.0003501 * x13 - x15
    x17 = math.sin(q4)
    x18 = x0 * x11
    x19 = 0.31436 * x18
    x20 = x1 * x4
    x21 = x10 * x20
    x22 = -x19 - 0.31436 * x21
    x23 = math.cos(q6)
    x24 = -0.16743 * x9
    x25 = x18 + x21
    x26 = x17 * x25
    x27 = math.sin(q5)
    x28 = x17 * x2
    x29 = x1 * x28
    x30 = -x18 - x21
    x31 = x30 * x7
    x32 = -0.0003501 * x29 - 0.0003501 * x31
    x33 = math.sin(q6)
    x34 = x13 - x5
    x35 = 0.16743 * x27
    x36 = x29 + x31
    x37 = 0.16743 * x14
    x38 = x36 * x37
    x39 = 0.42076 * x10
    x40 = 0.01275 * x18
    x41 = x10 * x7
    x42 = 0.31436 * x41
    x43 = 0.0003501 * x18
    x44 = x14 * x2
    x45 = 0.31436 * x5
    x46 = 0.16743 * x41
    x47 = 0.16743 * x28
    x48 = x10 * x17
    x49 = x0 * x48
    x50 = x2 * x7
    x51 = x2 * x35
    x52 = 0.01275 * x12
    x53 = 0.0003501 * x12
    x54 = 0.31436 * x20
    x55 = x10 * x18
    x56 = x20 + x55
    x57 = 0.16743 * x23
    x58 = x17 * x57
    x59 = -x20 - x55
    x60 = 0.0003501 * x7
    x61 = x27 * x60
    x62 = x10 * x5
    x63 = x12 - x62
    x64 = x37 * x59
    x65 = x0 * x28
    x66 = 0.31436 * x12
    x67 = 0.31436 * x62
    x68 = x0 * x2
    x69 = x68 * x7
    x70 = -x12 + x62
    x71 = x17 * x70
    x72 = x63 * x7
    x73 = -x69 - x71
    x74 = x33 * x37
    x75 = 0.0003501 * x20
    x76 = 0.0003501 * x55
    x77 = 0.0003501 * x65
    x78 = x7 * x70
    x79 = -x65 + x78
    x80 = x27 * x79
    x81 = 0.16743 * x69
    x82 = 0.16743 * x71
    x83 = x27 * x56
    x84 = 0.16743 * x83
    x85 = x14 * x79
    x86 = x1 * x48
    x87 = -x13 + x5
    x88 = x34 * x37
    x89 = x25 * x7
    x90 = x17 * x30
    x91 = x27 * x87
    x92 = 0.31436 * x50
    x93 = x10 * x11
    x94 = 0.0003501 * x14
    x95 = 0.31436 * x48
    x96 = 0.0003501 * x28
    x97 = x4 * x41
    x98 = 0.16743 * x50
    x99 = 0.16743 * x48
    x100 = x2 * x4
    x101 = x11 * x28
    x102 = x11 * x2
    x103 = x102 * x27
    x104 = x102 * x37
    x105 = x28 * x4
    x106 = x105 - x41
    x107 = x4 * x50
    x108 = -x107 - x48
    x109 = x26 + x9
    x110 = x29 - x89
    x111 = x107 + x48

    geometric_jacobian = numpy.array(
        [
            [
                -0.01175 * x0
                - x1 * x3
                + 0.01275 * x13
                + x14 * x16
                + x17 * x22
                + x23 * (x24 - 0.16743 * x26)
                + x27 * x32
                + x33 * (x34 * x35 + x38)
                - x6
                - 0.31436 * x9,
                x0 * x39
                + x0 * x42
                + x2 * x40
                + x23 * (x0 * x46 - x47 * x5)
                + x27 * (x15 * x50 + 0.0003501 * x49)
                - x28 * x45
                + x33 * (x18 * x51 + x37 * (-x49 - x5 * x50))
                + x43 * x44,
                -x10 * x6
                + x14 * (-x10 * x15 + x53)
                + x17 * (-x10 * x19 - x54)
                + x33 * (x35 * x63 + x64 * x7)
                + x52
                - x56 * x58
                - x59 * x61,
                x23 * (-0.16743 * x65 - 0.16743 * x72)
                + x27 * (0.0003501 * x69 + 0.0003501 * x71)
                - 0.31436 * x65
                + x7 * (-x66 + x67)
                + x73 * x74,
                x14 * (x77 - 0.0003501 * x78)
                - x27 * (-x75 - x76)
                + x33 * (x64 - 0.16743 * x80),
                x23 * (-x84 + 0.16743 * x85) - x33 * (x81 + x82),
                0,
            ],
            [
                -x0 * x3
                + 0.01175 * x1
                + x14 * (x75 + x76)
                + x17 * (x66 - x67)
                + 0.01275 * x20
                + x23 * (-x81 - x82)
                + x27 * (-0.0003501 * x72 - x77)
                + x33 * (x37 * (x65 + x72) + x84)
                + 0.01275 * x55
                - 0.31436 * x69,
                -x1 * x39
                - x1 * x42
                - x2 * x52
                + x23 * (-x1 * x46 + x20 * x47)
                + x27 * (-x50 * x75 - 0.0003501 * x86)
                + x28 * x54
                + x33 * (-x12 * x51 + x37 * (x20 * x50 + x86))
                - x44 * x53,
                x14 * (0.0003501 * x21 + x43)
                + x17 * (0.31436 * x13 - x45)
                + 0.01275 * x21
                + x33 * (x25 * x35 + x7 * x88)
                - x34 * x61
                + x40
                - x58 * x87,
                x22 * x7
                + x23 * (0.16743 * x29 - 0.16743 * x89)
                + x27 * (-0.0003501 * x9 + 0.0003501 * x90)
                + 0.31436 * x29
                + x74 * (x9 - x90),
                x14 * x32 - x16 * x27 + x33 * (-x35 * x36 + x88),
                x23 * (x38 - 0.16743 * x91) - x33 * (x24 + 0.16743 * x90),
                0,
            ],
            [
                0,
                x23 * (-x4 * x99 - x98)
                + x27 * (-x96 + 0.0003501 * x97)
                - x3
                + x33 * (x35 * x93 + x37 * (x28 - x97))
                - x4 * x95
                - x92
                + x93 * x94
                + 0.01275 * x93,
                x100 * x94
                + 0.01275 * x100
                + x101 * x57
                + 0.31436 * x101
                - x103 * x60
                + x33 * (x100 * x35 + x104 * x7),
                x106 * x74
                + x23 * (-x4 * x98 - x99)
                + x27 * (-x4 * x96 + 0.0003501 * x41)
                - x4 * x92
                - x95,
                -0.0003501 * x103
                + x14 * (0.0003501 * x107 + 0.0003501 * x48)
                + x33 * (x104 - x108 * x35),
                x23 * (x102 * x35 + x108 * x37) - x33 * (-0.16743 * x105 + x46),
                0,
            ],
            [0, x1, -x68, x56, x73, x14 * x56 + x80, x23 * x73 - x33 * (-x83 + x85)],
            [
                0,
                x0,
                x8,
                x87,
                x109,
                x110 * x27 + x14 * x87,
                x109 * x23 - x33 * (x110 * x14 - x91),
            ],
            [
                -1,
                0,
                -x10,
                -x102,
                x106,
                -x102 * x14 - x111 * x27,
                x106 * x23 - x33 * (x103 - x111 * x14),
            ],
        ]
    )

    return geometric_jacobian
